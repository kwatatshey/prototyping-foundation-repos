name: Multi-Env-Deployment

on:
  workflow_dispatch:
    inputs:
      environment_name:
        description: 'Environment name'
        required: true
        default: 'development'

  pull_request:
    paths:
      - 'eks-argo-karpenter**'
  push:
    paths:
      - 'eks-argo-karpenter/**'
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  TF_IN_AUTOMATION: true
  AWS_REGION: us-east-1
  AWS_ASSUMED_ROLE_ARN: arn:aws:iam::955769636964:role/deployment-terraform-prototyping-us-east-1-955769636964
  AWS_ROLE_SESSION_NAME: eks-role-session
  DEBUG: true
  WORKING_DIRECTORY: ./eks-argo-karpenter

jobs:
  deploy_dev:
    environment: development
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    env:
      ENVIRONMENT_NAME: dev
      ACTIONS_RUNNER_DEBUG: true
      ACTIONS_STEP_DEBUG: true

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install tfenv
        run: |
          git clone --depth=1 https://github.com/tfutils/tfenv.git ${HOME}/.tfenv
          echo 'export PATH="${HOME}/.tfenv/bin:${PATH}"' >> ${HOME}/.bash_profile
          mkdir -p ${HOME}/.local/bin
          ln -s ${HOME}/.tfenv/bin/* ${HOME}/.local/bin
          export PATH="${HOME}/.tfenv/bin:${PATH}"
          . ${HOME}/.profile

      - name: Setup Terraform (tfenv)
        run: |
          TF_VERSION=$(cat .terraform-version)
          tfenv install $TF_VERSION
          tfenv use $TF_VERSION

      - name: Verify Terraform Version
        run: terraform --version

      - name: Configure AWS credentials with OIDC assume role for Dev
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ASSUMED_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check ENVIRONMENT_NAME
        run: echo "Environment Name is $ENVIRONMENT_NAME"

      - name: Setup Terraform Init
        run: |
          terraform init -backend-config="environments/${{ env.ENVIRONMENT_NAME }}/${{ env.ENVIRONMENT_NAME }}.hcl"

      - name: Terraform Validate (Dev)
        id: tf-validate-dev
        run: terraform validate

      - name: Terraform Format (Dev)
        id: tf-fmt-dev
        run: |
          git diff --quiet || (terraform fmt -diff -recursive -check)

      - name: Install TFLint for Dev
        run: |
          curl -sSfL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash -s -- -b $HOME/bin v0.48.0
          echo "$HOME/bin" >> $GITHUB_PATH
        shell: bash

      - name: Terraform Lint (Dev)
        id: tf-lint-dev
        run: tflint --filter environments/${{ env.ENVIRONMENT_NAME }}/${{ env.ENVIRONMENT_NAME }}.tfvars

      - name: Terraform Plan (Dev)
        run: terraform plan -var-file="environments/${{ env.ENVIRONMENT_NAME }}/${{ env.ENVIRONMENT_NAME }}.tfvars"

      - name: Terraform Apply (Dev)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -var-file="environments/${{ env.ENVIRONMENT_NAME }}/${{ env.ENVIRONMENT_NAME }}.tfvars"

  deploy_prd:
    environment: production
    needs: deploy_dev
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only trigger on pushes to main branch

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    env:
      ENVIRONMENT_NAME: prd
      ACTIONS_RUNNER_DEBUG: true
      ACTIONS_STEP_DEBUG: true

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install tfenv
        run: |
          git clone --depth=1 https://github.com/tfutils/tfenv.git ${HOME}/.tfenv
          echo 'export PATH="${HOME}/.tfenv/bin:${PATH}"' >> ${HOME}/.bash_profile
          mkdir -p ${HOME}/.local/bin
          ln -s ${HOME}/.tfenv/bin/* ${HOME}/.local/bin
          export PATH="${HOME}/.tfenv/bin:${PATH}"
          . ${HOME}/.profile

      - name: Setup Terraform (tfenv)
        run: |
          TF_VERSION=$(cat .terraform-version)
          tfenv install $TF_VERSION
          tfenv use $TF_VERSION

      - name: Verify Terraform Version
        run: terraform --version

      - name: Configure AWS credentials with OIDC assume role for Prd
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ASSUMED_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check ENVIRONMENT_NAME
        run: echo "Environment Name is $ENVIRONMENT_NAME"

      - name: Setup Terraform Init
        run: |
          terraform init -backend-config="environments/${{ env.ENVIRONMENT_NAME }}/${{ env.ENVIRONMENT_NAME }}.hcl"

      - name: Terraform Validate (Prd)
        id: tf-validate-prd
        run: terraform validate

      - name: Terraform Format (Prd)
        id: tf-fmt-prd
        run: |
          git diff --quiet || (terraform fmt -diff -recursive -check)

      - name: Install TFLint for Prd
        run: |
          curl -sSfL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash -s -- -b $HOME/bin v0.48.0
          echo "$HOME/bin" >> $GITHUB_PATH
        shell: bash

      - name: Terraform Lint (Prd)
        id: tf-lint-prd
        run: tflint --filter environments/${{ env.ENVIRONMENT_NAME }}/${{ env.ENVIRONMENT_NAME }}.tfvars

      - name: Terraform Plan (Prd)
        run: terraform plan -var-file="environments/${{ env.ENVIRONMENT_NAME }}/${{ env.ENVIRONMENT_NAME }}.tfvars"

      - name: Terraform Apply (Prd)
        run: terraform apply -auto-approve -var-file="environments/${{ env.ENVIRONMENT_NAME }}/${{ env.ENVIRONMENT_NAME }}.tfvars"
